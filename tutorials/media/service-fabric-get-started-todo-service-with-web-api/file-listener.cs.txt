using System;
using System.Collections.Generic;
using System.Fabric;
using System.Fabric.Description;
using Microsoft.ServiceFabric.Data;
using Microsoft.ServiceFabric.Services;
using System.Threading;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Dependencies;
using Microsoft.Owin.Hosting;
using Owin;

namespace Todo
{
	public class WebApiListener : ICommunicationListener
	{
		// add owin selfhost webapi by:
		// Install-Package Microsoft.AspNet.WebApi.OwinSelfHost 

		/// <summary>
		/// address provided to Service Fabric for endpoint resolution
		/// </summary>
		public string Address { get; private set; }

		/// <summary>
		/// prefix provided to Web Api listener for local endpoint
		/// </summary>
		public string Prefix { get; private set; }

		/// <summary>
		/// the <c>State</c> needed by Controllers
		/// </summary>
		internal IReliableObjectStateManager StateManager { get; private set; }

		public WebApiListener(IReliableObjectStateManager state)
		{
			this.StateManager = state;
		}

		static readonly string LocalNode = FabricRuntime.GetNodeContext().IPAddressOrFQDN;
		public void Initialize(ServiceInitializationParameters sip)
		{
			var erd = GetInputEndpoint(sip);
			var id = GetId(sip);
			this.Address = erd.Protocol + "://" + LocalNode + ":" + erd.Port + "/"
				+ id + "/" + sip.PartitionId + "/";
		}

		public async Task<string> OpenAsync(CancellationToken cancellationToken)
		{
			try
			{
				// start the web server and the web socket listener
				await Start();
				ServiceEventSource.Current.Info("Service is now listening on: " + this.Address);
                return this.Address;
			}
			catch (Exception ex)
			{
				ServiceEventSource.Current.Warn("Open failed: " + ex.StackTrace);
				Stop();
				return null;
			}
		}

		public Task CloseAsync(CancellationToken cancellationToken)
		{
			Stop();
			return Task.FromResult<bool>(true);
		}

		public void Abort()
		{
			Stop();
		}

		static EndpointResourceDescription GetInputEndpoint(ServiceInitializationParameters sip)
		{
			foreach (var erd in sip.CodePackageActivationContext.GetEndpoints())
			{
				if (erd.EndpointType == EndpointType.Input)
					return erd;
			}

			ServiceEventSource.Current.Error("No input endpoint found");
			throw new ApplicationException("No input endpoint found");
		}

		static long GetId(ServiceInitializationParameters sip)
		{
			if (sip is StatefulServiceInitializationParameters)
				return ((StatefulServiceInitializationParameters)sip).ReplicaId;
			return ((StatelessServiceInitializationParameters)sip).InstanceId;
		}

		SemaphoreSlim webEvent = new SemaphoreSlim(1);
		bool webIsRunning = false;
		Task webTask = null;
		async Task Start()
		{
			Uri u = new Uri(this.Address);
			this.Prefix = u.Scheme + "://+:" + u.Port + u.LocalPath;
			await this.webEvent.WaitAsync();

			webTask = Task.Run(async () =>
			{
				using (WebApp.Start(this.Prefix, appBuilder => Configuration(appBuilder)))
				{
					webIsRunning = true;
					await webEvent.WaitAsync();
				}

				webIsRunning = false;
			});
		}

		void Stop()
		{
			if (webIsRunning)
				webEvent.Release();
		}

		void Configuration(IAppBuilder appBuilder)
		{
			var config = new HttpConfiguration();
			config.DependencyResolver = new StateResolver(this.StateManager);

			config.MapHttpAttributeRoutes();
			appBuilder.UseWebApi(config);
		}
	}

	// local dependency resolver

	class StateResolver : IDependencyResolver
	{
		// define empty list
		static readonly object[] EmptyList = new object[0];

		// create matching type signature
		Type[] IReliableObjectStateManagers = new Type[] { typeof(IReliableObjectStateManager) };
		
		// create argument container
		object[] args = new object[1];
		
		public StateResolver(IReliableObjectStateManager state)
		{
			// store the instance for future controller creation
			this.args[0] = state;
		}
		
		public object GetService(Type t)
		{
			if (t.IsSubclassOf(typeof(ApiController)))
			{
				var c = t.GetConstructor(IReliableObjectStateManagers);
				if (c != null)
					return c.Invoke(args);
			}
			return null;
		}

		IDependencyScope IDependencyResolver.BeginScope() { return this; }

		IEnumerable<object> IDependencyScope.GetServices(Type serviceType) { return EmptyList; }

		void IDisposable.Dispose() { }
	}
}
